// 6 Требуется найти одну ошибку в следующем коде:

const str = `
purschases(
  Apple(
    price: 100
  ),
  Banana(
    price: 200
  )
)
`;

/**
 * Находит первое выражение в скобках, начиная с заданной позиции в строке.
 *
 * @param {string} str - Строка, в которой нужно произвести поиск.
 * @param {number} pos - Позиция, с которой нужно начать поиск.
 * @return {string} - Найденное выражение в скобках.
 */
function bracket(str: string, pos: number): string {
  // Находим индекс открывающей скобки, начиная с заданной позиции
  const openIndex = str.indexOf('(', pos);

  // Если открывающая скобка не найдена, выбрасывается ошибка
  if (openIndex === -1) {
    throw new Error(`Invalid index: ${pos}`);
  }

  // Инициализируем счетчик для отслеживания вложенности скобок
  let count = 1;

  // Перебираем символы после открывающей скобки
  for (let i = openIndex + 1; i < str.length; i++) {
    // Если встречается открывающая скобка, увеличиваем счетчик
    if (str[i] === '(') {
      count++;
    }
    // Если встречается закрывающая скобка, уменьшаем счетчик
    else if (str[i] === ')') {
      // исправлено: переношу уменьшение счетчика сразу после else if
      count--;

      /* исправлено: изменил условие на: все скобки закрыты (count === 0)
       нахожу закрывающую скобку, соответствующую самой крайней открывающей
      прошлое условие (--count === 1) искало не ту закрывающую скобку
      оно находило закрывающую скобку, после которой оставалась еще одна незакрытая
      */
      if (count === 0) {
        // Возвращаем подстроку от открывающей скобки до закрывающей
        return str.substring(openIndex, i + 1);
      }
    }
  }

  // Если скобка не найдена, выбрасывается ошибка
  throw new Error(`Invalid index: ${pos}`);
}

// Вызываем функцию и выводим результат в консоль
console.log(bracket(str, 2));
console.log(bracket(str, 14));
/* Теперь вывод в консоль будет правильный:

  Apple(
    price: 100
  ),
  Banana(
    price: 200
  )
)
(
    price: 100
  )

*/
