async function functionThrow() {
  throw new Error('Function throw!');
}

// Есть код с ошибкой:
async () => {
  while (true) {
    await functionThrow();
  }
};

// В чём особенности обработки ошибок каждого из вариантов и какой у них будет вывод?

// 1 вариант:
/*
Здесь асинхронная функция выполняется вне блока try, catch.
try/catch не может перехватить ошибку из асинхронного кода, который выполняется в другом цикле событий.
На практике это может привести к падению приложения.
Этот код никогда не выполнится и ошибка не будет поймана.
*/
try {
  (async () => {
    while (true) {
      await functionThrow();
    }
  })();
} catch (error) {
  console.log(error);
}

// 2 вариант:
/*
Ошибка будет поймана и выведена в консоль один раз.
Так как асинхронный код обернут в try и catch, при первой ошибке выполнение перейдет в блок catch, цикл прервется, и функция завершит свою работу.
*/
(async () => {
  try {
    while (true) {
      await functionThrow();
    }
  } catch (error) {
    console.log(error);
  }
})();

// 3 вариант:
/* 
Так как while всегда true, будет будет бесконечный цикл. Ошибка будет выводиться в консоль постоянно, потому что try и catch находятся внутри цикла.
*/
(async () => {
  while (true) {
    try {
      await functionThrow();
    } catch (error) {
      console.log(error);
    }
  }
})();
